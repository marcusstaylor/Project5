/**
 * 
 */
package prj5;

import student.TestCase;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 * DataProcessorTest will use JUnit functionality to ensure that
 * DataProcessor Class works as intended
 * 
 * @author Bryan Dobbins (bryand5)
 * @version 2019.04.15
 */
public class DataProcessorTest extends TestCase {

    private LinkedList<Student> studList;
    private LinkedList<Song> songList;


    /**
     * DataProcessorTest() does nothing. Client code should never call this.
     * This is only here for the sake of code formatting.
     */
    public DataProcessorTest() {
        // This Constructor was intentionally left blank
    }


    /**
     * setUp() will be invoked before each test method to provide a blank
     * and controlled testing environment to ensure that testing is valid
     */
    @Override
    public void setUp() {
        studList = new LinkedList<Student>();
        songList = new LinkedList<Song>();
    }


    /**
     * testSorting() will ensure that the reorderByData(int) method of
     * DataProcessor works as intended.
     */
    public void testSorting() {
        Song[] reference = new Song[5];
        reference[0] = new Song("bravo", "charlie", "alpha", 1000);
        reference[1] = new Song("alpha", "oscar", "bravo", 2000);
        reference[2] = new Song("sierra", "whiskey", "xray", 50);
        reference[3] = new Song("zulu", "golf", "paris", 2020);
        reference[4] = new Song("echo", "foxtrot", "charlie", 2015);

        songList.add(reference[0]);
        songList.add(reference[1]);
        songList.add(reference[2]);
        songList.add(reference[3]);
        songList.add(reference[4]);

        DataProcessor dataPro = new DataProcessor(songList, studList);

        songList = dataPro.reorderByData(4);

        assertEquals(reference[2], songList.get(0));
        assertEquals(reference[0], songList.get(1));
        assertEquals(reference[1], songList.get(2));
        assertEquals(reference[4], songList.get(3));
        assertEquals(reference[3], songList.get(4));

        songList = dataPro.reorderByData(3);

        assertEquals(reference[0], songList.get(0));
        assertEquals(reference[1], songList.get(1));
        assertEquals(reference[4], songList.get(2));
        assertEquals(reference[3], songList.get(3));
        assertEquals(reference[2], songList.get(4));

        songList = dataPro.reorderByData(1);

        assertEquals(reference[0], songList.get(0));
        assertEquals(reference[4], songList.get(1));
        assertEquals(reference[3], songList.get(2));
        assertEquals(reference[1], songList.get(3));
        assertEquals(reference[2], songList.get(4));

        songList = dataPro.reorderByData(2);

        assertEquals(reference[1], songList.get(0));
        assertEquals(reference[0], songList.get(1));
        assertEquals(reference[4], songList.get(2));
        assertEquals(reference[2], songList.get(3));
        assertEquals(reference[3], songList.get(4));

        try {
            dataPro.reorderByData(0);
        }
        catch (IllegalArgumentException e) {
            assertEquals(e.toString(), "java.lang.IllegalArgumentException: "
                + "The int argument must be on the range of "
                + "1 to 4 inclusive.");
        }

        try {
            dataPro.reorderByData(5);
        }
        catch (IllegalArgumentException e) {
            assertEquals(e.toString(), "java.lang.IllegalArgumentException: "
                + "The int argument must be on the range of "
                + "1 to 4 inclusive.");
        }
    }


    /**
     * testSampling() will ensure that the correct values are returned when
     * the
     */
    public void testSampling() {
        Song[] refSong = new Song[5];
        refSong[0] = new Song("bravo", "charlie", "alpha", 1000);
        refSong[1] = new Song("alpha", "oscar", "bravo", 2000);
        refSong[2] = new Song("sierra", "whiskey", "x-ray", 50);
        refSong[3] = new Song("zulu", "golf", "paris", 2020);
        refSong[4] = new Song("echo", "foxtrot", "charlie", 2015);

        songList.add(refSong[0]);
        songList.add(refSong[1]);
        songList.add(refSong[2]);
        songList.add(refSong[3]);
        songList.add(refSong[4]);

        Student[] refStud = new Student[7];

        String[] ar1 = { "Yes", "Yes", "Yes", "Yes", "Yes", "Yes", "Yes", "Yes",
            "Yes", "Yes" };
        String[] ar2 = { "No", "No", "No", "No", "No", "No", "No", "No", "No",
            "No" };
        String[] ar3 = { "Yes", "No", "Yes", "No", "Yes", "No", "Yes", "No",
            "Yes", "No" };

        refStud[0] = new Student(1, "date1", Major.CS, Hobby.READING,
            Region.NORTHEAST, ar1);
        refStud[1] = new Student(2, "date1", Major.CS, Hobby.READING,
            Region.NORTHEAST, ar2);
        refStud[2] = new Student(3, "date1", Major.CS, Hobby.READING,
            Region.SOUTHEAST, ar3);
        refStud[3] = new Student(4, "date1", Major.OTHER, Hobby.READING,
            Region.SOUTHEAST, ar1);
        refStud[4] = new Student(5, "date1", Major.OTHER, Hobby.READING,
            Region.OTHER_US, ar3);
        refStud[5] = new Student(6, "date1", Major.ENGINEERING, Hobby.ART,
            Region.OUTSIDE_US, ar1);
        refStud[6] = new Student(7, "date1", Major.MATH, Hobby.MUSIC,
            Region.OUTSIDE_US, ar3);

        studList.add(refStud[0]);
        studList.add(refStud[1]);
        studList.add(refStud[2]);
        studList.add(refStud[3]);
        studList.add(refStud[4]);
        studList.add(refStud[5]);
        studList.add(refStud[6]);

        DataProcessor dataPro = new DataProcessor(songList, studList);

        assertEquals(33, dataPro.calculateResponses(refSong[0], 2, 1, 2),
            0.001);
        assertEquals(66, dataPro.calculateResponses(refSong[0], 2, 1, 1),
            0.001);
        assertEquals(100, dataPro.calculateResponses(refSong[0], 2, 4, 1),
            0.001);
        assertEquals(50, dataPro.calculateResponses(refSong[0], 2, 4, 2),
            0.001);
        assertEquals(100, dataPro.calculateResponses(refSong[1], 2, 4, 1),
            0.001);
        assertEquals(50, dataPro.calculateResponses(refSong[1], 2, 4, 2),
            0.001);
        assertEquals(100, dataPro.calculateResponses(refSong[2], 2, 4, 1),
            0.001);
        assertEquals(50, dataPro.calculateResponses(refSong[2], 2, 4, 2),
            0.001);
        assertEquals(100, dataPro.calculateResponses(refSong[3], 2, 4, 1),
            0.001);
        assertEquals(50, dataPro.calculateResponses(refSong[3], 2, 4, 2),
            0.001);
        assertEquals(100, dataPro.calculateResponses(refSong[4], 2, 4, 1),
            0.001);
        assertEquals(50, dataPro.calculateResponses(refSong[4], 2, 4, 2),
            0.001);
        assertEquals(100, dataPro.calculateResponses(refSong[4], 1, 2, 1),
            .001);
        assertEquals(100, dataPro.calculateResponses(refSong[4], 1, 4, 1),
            .001);
        assertEquals(100, dataPro.calculateResponses(refSong[4], 2, 2, 1),
            .001);
        assertEquals(100, dataPro.calculateResponses(refSong[4], 2, 3, 1),
            .001);
        assertEquals(50, dataPro.calculateResponses(refSong[4], 3, 1, 1), .001);
        assertEquals(100, dataPro.calculateResponses(refSong[4], 3, 2, 1),
            .001);
        assertEquals(100, dataPro.calculateResponses(refSong[4], 3, 4, 1),
            .001);

        for (int i = 0; i < 5; i++) {
            assertEquals(100, dataPro.calculateResponses(refSong[i], 3, 3, 1),
                0.001);
            assertEquals(0.0, dataPro.calculateResponses(refSong[i], 3, 3, 2),
                0.001);
        }

        Exception exception1 = null;
        try {
            dataPro.calculateResponses(refSong[1], -1, -1, -1);
            fail("calculateResponses() is not throwing"
                + " an exception when it should");
        }
        catch (Exception e) {
            exception1 = e;
        }
        assertTrue(
            "calculateResponses() is throwing the wrong type of exceptions",
            exception1 instanceof IllegalArgumentException);

        Exception exception2 = null;
        try {
            dataPro.calculateResponses(refSong[1], 10, 10, 10);
            fail("calculateResponses() is not throwing an exception when "
                + "it should");
        }
        catch (Exception e) {
            exception2 = e;
        }
        assertTrue(
            "calculateResponses() is throwing the wrong type of exceptions",
            exception2 instanceof IllegalArgumentException);

        Exception exception3 = null;
        try {
            dataPro.calculateResponses(refSong[1], 1, -1, 10);
            fail("calculateResponses() is not throwing an exception when"
                + " it should");
        }
        catch (Exception e) {
            exception3 = e;
        }
        assertTrue(
            "calculateResponses() is throwing the wrong type of exceptions",
            exception3 instanceof IllegalArgumentException);

        Exception exception4 = null;
        try {
            dataPro.calculateResponses(refSong[1], 1, 10, 10);
            fail("calculateResponses() is not throwing an exception "
                + "when it should");
        }
        catch (Exception e) {
            exception4 = e;
        }
        assertTrue(
            "calculateResponses() is throwing the wrong type of exceptions",
            exception4 instanceof IllegalArgumentException);

        Exception exception5 = null;
        try {
            dataPro.calculateResponses(refSong[1], 1, 1, -1);
            fail("calculateResponses() is not throwing an exception "
                + "when it should");
        }
        catch (Exception e) {
            exception5 = e;
        }
        assertTrue(
            "calculateResponses() is throwing the wrong type of exceptions",
            exception5 instanceof IllegalArgumentException);

        Exception exception6 = null;
        try {
            dataPro.calculateResponses(refSong[1], 1, 1, 10);
            fail("calculateResponses() is not throwing an exception"
                + " when it should");
        }
        catch (Exception e) {
            exception6 = e;
        }
        assertTrue(
            "calculateResponses() is throwing the wrong type of exceptions",
            exception6 instanceof IllegalArgumentException);

        Song notASong = new Song("", "", "", 0);
        Exception exceptionSong = null;
        try {
            dataPro.calculateResponses(notASong, 1, 1, 1);
            fail("calculateResponses() is not throwing an exception"
                + " when it should");
        }
        catch (Exception e) {
            exceptionSong = e;
        }
        assertTrue(
            "calculateResponses() is throwing the wrong type of exceptions",
            exceptionSong instanceof IllegalArgumentException);

        assertEquals(5, (int)dataPro.getTotalOfResponses(refSong[1], 1, 1, 4));

        songList.clear();
        studList.clear();

        songList.add(new Song("test", "test", "test", 2000));

        assertEquals(0, dataPro.calculateResponses(songList.getFront(), 1, 1,
            1));

    }


    /**
     * testReading() will ensure that the DataReader class will properly read
     * from data files and create the appropriate data structures
     */
    public void testReading() {
        String nullReference = null;
        String[] test = "1,10/14/15 10:11,Math or CMDA,Southeast,sports,,,"
            .split(",");
        assertEquals("1", test[0]);
        assertEquals("10/14/15 10:11", test[1]);
        assertEquals("Math or CMDA", test[2]);
        assertEquals("Southeast", test[3]);
        assertEquals("sports", test[4]);
        assertEquals(5, test.length);
        String testLine = "1,10/14/15 10:11,Math or CMDA,Southeast,sports,,,";
        Scanner scanLine = new Scanner(testLine);
        scanLine.useDelimiter(",");
        assertTrue(scanLine.hasNext());
        assertEquals("1", scanLine.next());
        assertTrue(scanLine.hasNext());
        assertEquals("10/14/15 10:11", scanLine.next());
        assertTrue(scanLine.hasNext());
        assertEquals("Math or CMDA", scanLine.next());
        assertTrue(scanLine.hasNext());
        assertEquals("Southeast", scanLine.next());
        assertTrue(scanLine.hasNext());
        assertEquals("sports", scanLine.next());
        assertTrue(scanLine.hasNext());
        assertEquals("", scanLine.next());
        assertTrue(scanLine.hasNext());
        assertEquals("", scanLine.next());
        assertFalse(scanLine.hasNext());
        scanLine.close();
        DataReader read;
        try {
            read = new DataReader("MusicSurveyData.csv", "SongList.csv");
            assertEquals("All These Things I've Done", read.getSongList().get(0)
                .getTitle());
            assertEquals("All You Need Is Love", read.getSongList().get(1)
                .getTitle());
            assertEquals("American Pie", read.getSongList().get(2).getTitle());
            assertEquals("Anarchy in the UK", read.getSongList().get(3)
                .getTitle());
            assertEquals("Another One Bites the Dust", read.getSongList().get(4)
                .getTitle());
            assertEquals("Bad Blood", read.getSongList().get(5).getTitle());
            assertEquals("Boom Boom Pow", read.getSongList().get(6).getTitle());

            assertEquals(59, read.getSongList().getSize());
            read = new DataReader("MusicSurveyDataTest2.csv",
                "SongListTest2.csv");
            assertEquals("All These Things I've Done", read.getSongList().get(0)
                .getTitle());
            assertEquals(2.0, read.getProcessor().getNumberOfCorrect(read
                .getSongList().get(0), 1, 3, 1), 0.001);
        }
        catch (FileNotFoundException e) {
            assertNotNull(nullReference);
        }
    }
}
